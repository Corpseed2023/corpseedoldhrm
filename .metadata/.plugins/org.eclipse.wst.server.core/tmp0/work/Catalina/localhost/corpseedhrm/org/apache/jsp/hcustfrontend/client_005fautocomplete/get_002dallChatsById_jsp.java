/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.76
 * Generated at: 2023-09-22 13:56:44 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.hcustfrontend.client_005fautocomplete;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import commons.AzureBlob;
import com.azure.storage.blob.BlobClientBuilder;
import java.nio.file.Files;
import net.sf.json.JSONObject;
import net.sf.json.JSONArray;
import java.sql.*;
import java.util.*;
import commons.DbCon;

public final class get_002dallChatsById_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("commons.DbCon");
    _jspx_imports_classes.add("java.nio.file.Files");
    _jspx_imports_classes.add("net.sf.json.JSONArray");
    _jspx_imports_classes.add("commons.AzureBlob");
    _jspx_imports_classes.add("net.sf.json.JSONObject");
    _jspx_imports_classes.add("com.azure.storage.blob.BlobClientBuilder");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=iso-8859-1");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write(" \n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");

JSONArray jsonArr = new JSONArray();
JSONObject json=new JSONObject();

String token= (String)session.getAttribute("uavalidtokenno");
String clientKey1=request.getParameter("clientKey");
String salesKey=request.getParameter("salesKey");
ResultSet rs=null;
PreparedStatement ps=null;
String sql=null;
try(Connection con=DbCon.getCon("","","")){
	Properties properties = new Properties();
	properties.load(getServletContext().getResourceAsStream("/staticresources/properties"));			
	String azure_key=properties.getProperty("azure_key");
	String azure_container=properties.getProperty("azure_container");
	BlobClientBuilder client=AzureBlob.getBlobClient(azure_key, azure_container);	
	
	sql="select pfkey,pfmilestonekey,pfmilestonename,pfdynamicform,pfcontent,pffilename,"
	+"pfdate,pftime,pfsubmitstatus,pfaddedbyuid,pfaddedbyname,pfformsubmitstatus,"
	+"pfdynamicformname,pfunreadstatus from hrmproject_followup where "
	+"pfsaleskey='"+salesKey+"' and pftokenno='"+token+"' and pfstatus='1' order by pfuid desc limit 0,10";
// 	System.out.println(sql);
	ps=con.prepareStatement(sql);
	rs =ps.executeQuery();
	
	while(rs.next())
	{
		json.put("key",rs.getString(1));		
		json.put("milestoneKey",rs.getString(2));
		json.put("milestoneName",rs.getString(3));
		json.put("dynamicForm",rs.getString(4));
		json.put("content",rs.getString(5));
		json.put("fileName",rs.getString(6));
		json.put("date",rs.getString(7));
		json.put("time",rs.getString(8));
		json.put("submitStatus",rs.getString(9));
		json.put("addedbyUid",rs.getString(10));
		json.put("addedbyName",rs.getString(11));
		json.put("formStatus",rs.getString(12));
		json.put("formName",rs.getString(13));
		json.put("unread",rs.getString(14));
		
		String fileName=rs.getString(6);
		String extension="";
		String size="";
		if(fileName!=null&&!fileName.equalsIgnoreCase("NA")&&fileName.length()>0){
		
	boolean fileExist=client.blobName(fileName).buildClient().exists();
	long bytes=0;
	if(fileExist){
		bytes=client.blobName(fileName).buildClient().getProperties().getBlobSize();
	}			
	long kb=bytes/1024;
	long mb=kb/1024;	
	
	if(mb>=1)size=mb+" MB";
	else if(kb>=1) size=kb+" KB";
	else size=bytes+" bytes";
	int index=rs.getString(6).lastIndexOf(".");
	extension=rs.getString(6).substring(index);
		}
		json.put("extension",extension);
		json.put("size",size);
		
		jsonArr.add(json);
	}

out.println(jsonArr);
}catch(Exception e){
	e.printStackTrace();
}finally{
	if(ps!=null){ps.close();}
	if(rs!=null){rs.close();}
}

    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
